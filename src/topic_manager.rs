use crate::config;
use rdkafka::admin::{AdminClient, AdminOptions, NewTopic, TopicReplication};
use rdkafka::client::DefaultClientContext;
use anyhow::Result;
use log::{info, error};

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–ø–∏–∫–∞–º–∏ Kafka
pub struct TopicManager {
    admin_client: AdminClient<DefaultClientContext>,
}

impl TopicManager {
    /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–æ–ø–∏–∫–æ–≤
    pub fn new() -> Result<Self> {
        let admin_config = config::create_admin_config();
        let admin_client: AdminClient<DefaultClientContext> = admin_config.create()?;

        Ok(Self { admin_client })
    }

    /// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    pub async fn create_topic_if_not_exists(&self, topic_name: &str) -> Result<()> {
        info!("üìù –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫: {}", topic_name);

        let new_topic = NewTopic::new(
            topic_name,
            1, // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–∏—Ü–∏–π
            TopicReplication::Fixed(1), // —Ñ–∞–∫—Ç–æ—Ä —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏
        );

        let admin_options = AdminOptions::new();

        match self.admin_client.create_topics(&[new_topic], &admin_options).await {
            Ok(results) => {
                for result in results {
                    match result {
                        Ok(_) => info!("‚úÖ –¢–æ–ø–∏–∫ {} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ", topic_name),
                        Err(e) => {
                            if e.1.to_string().contains("already exists") {
                                info!("‚ÑπÔ∏è  –¢–æ–ø–∏–∫ {} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", topic_name);
                            } else {
                                error!("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞ {}: {}", topic_name, e.1);
                                return Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞: {}", e.1));
                            }
                        }
                    }
                }
            }
            Err(e) => {
                error!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ {}: {}", topic_name, e);
                return Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞: {}", e));
            }
        }

        Ok(())
    }

    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞
    async fn topic_exists(&self, topic_name: &str) -> Result<bool> {
        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        let metadata = self.admin_client.fetch_metadata(None, std::time::Duration::from_secs(5))?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–ø–∏–∫ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        for topic in metadata.topics() {
            if topic.name() == topic_name {
                return Ok(true);
            }
        }

        Ok(false)
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–ø–∏–∫–æ–≤
    pub async fn list_topics(&self) -> Result<Vec<String>> {
        let metadata = self.admin_client.fetch_metadata(None, std::time::Duration::from_secs(5))?;
        let topics: Vec<String> = metadata.topics().iter().map(|t| t.name().to_string()).collect();

        info!("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤: {:?}", topics);
        Ok(topics)
    }
}
