use crate::config;
use rdkafka::producer::{FutureProducer, FutureRecord};
use std::time::Duration;
use anyhow::Result;
use log::{info, error, warn};

/// Producer –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Kafka
pub struct KafkaProducer {
    producer: FutureProducer,
    topic: String,
}

impl KafkaProducer {
    /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ producer'–∞
    pub fn new() -> Result<Self> {
        let producer: FutureProducer = config::create_producer_config().create()?;
        let topic = config::get_topic_name();

        Ok(Self { producer, topic })
    }

    /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka
    pub async fn send_message(&self, key: &str, payload: &str) -> Result<()> {
        let delivery_status = self.producer
            .send(
                FutureRecord::to(&self.topic)
                    .payload(payload.as_bytes())
                    .key(key),
                Duration::from_secs(5),
            )
            .await;

        match delivery_status {
            Ok((partition, offset)) => {
                info!("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:");
                info!("   Topic: {}", self.topic);
                info!("   Partition: {}", partition);
                info!("   Offset: {}", offset);
                info!("   Key: {}", key);
                info!("   Payload: {}", payload);
            }
            Err((e, _)) => {
                return Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e));
            }
        }

        Ok(())
    }

    /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    pub async fn send_test_message(&self) -> Result<()> {
        let test_key = "test-key";
        let test_payload = "–ü—Ä–∏–≤–µ—Ç –∏–∑ Rust Kafka Producer! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.";

        info!("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...");
        self.send_message(test_key, test_payload).await?;

        Ok(())
    }

    /// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–∞–º–∏
    pub async fn send_test_messages_with_numbers(&self, count: usize) -> Result<()> {
        info!("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–∞–º–∏...", count);

        for i in 1..=count {
            let key = format!("test-key-{}", i);
            let payload = format!("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä {}", i);

            if let Err(e) = self.send_message(&key, &payload).await {
                error!("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {}: {}", i, e);
            } else {
                info!("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", i);
            }

            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            tokio::time::sleep(Duration::from_millis(500)).await;
        }

        info!("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ {} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞", count);
        Ok(())
    }

    /// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    pub async fn send_multiple_test_messages(&self, count: usize) -> Result<()> {
        info!("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...", count);

        for i in 1..=count {
            let key = format!("test-key-{}", i);
            let payload = format!("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä {}", i);

            if let Err(e) = self.send_message(&key, &payload).await {
                error!("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {}: {}", i, e);
            }

            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            tokio::time::sleep(Duration::from_millis(100)).await;
        }

        info!("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ {} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞", count);
        Ok(())
    }
}
