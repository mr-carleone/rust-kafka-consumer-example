// –ú–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
mod config;
mod consumer;
mod producer;

// –ò–º–ø–æ—Ä—Ç—ã
use consumer::KafkaConsumer;
use producer::KafkaProducer;
use anyhow::Result;
use std::time::Duration;
use tokio::time::sleep;
use log::{info, error, warn};
use flexi_logger::{Logger, FileSpec, Age, Cleanup, Criterion, Naming, WriteMode};
use std::io::Write;

/// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
#[tokio::main]
async fn main() -> Result<()> {
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    println!("=== –ù–ê–ß–ê–õ–û –ü–†–û–ì–†–ê–ú–ú–´ ===");
    println!("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤–æ–æ–±—â–µ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏
    eprintln!("STDERR: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ");
    std::io::stdout().flush().unwrap();
    std::io::stderr().flush().unwrap();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–º
    Logger::try_with_str("info")
        .unwrap()
        .log_to_file(FileSpec::default().directory("logs").basename("combined"))
        .format(|w, now, record| {
            let message = format!("[{}][{}] {}\n",
                now.now().format("%Y-%m-%d %H:%M:%S"),
                record.level(),
                &record.args()
            );

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
            write!(w, "{}", message)
        })
        .rotate(
            Criterion::Age(Age::Day),
            Naming::Timestamps,
            Cleanup::KeepLogFiles(3),
        )
        .write_mode(WriteMode::BufferAndFlush)
        .start()
        .unwrap();

    println!("–õ–æ–≥–≥–µ—Ä —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

    info!("üöÄ –ó–∞–ø—É—Å–∫ Rust Kafka Consumer...");
    info!("==================================");
    println!("–õ–æ–≥–∏ –∑–∞–ø–∏—Å–∞–Ω—ã");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    config::initialize_config();
    info!("==================================");
    println!("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã Kafka —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    info!("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ Kafka...");
    println!("–ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ Kafka...");
    sleep(Duration::from_secs(10)).await;
    println!("–û–∂–∏–¥–∞–Ω–∏–µ Kafka –∑–∞–≤–µ—Ä—à–µ–Ω–æ");

    // –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø - –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤
    println!("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤");

    // –°–æ–∑–¥–∞–µ–º producer –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    info!("üì§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è producer'–∞...");
    println!("–°–æ–∑–¥–∞–µ–º producer...");
    let producer: Option<KafkaProducer> = match KafkaProducer::new() {
        Ok(p) => {
            println!("Producer —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            Some(p)
        },
        Err(e) => {
            println!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è producer: {}", e);
            error!("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è producer'–∞: {}", e);
            warn!("   –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ producer'–∞...");
            None
        }
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ producer —Å–æ–∑–¥–∞–Ω)
    if let Some(p) = producer {
        info!("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...");
        println!("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...");

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if let Err(e) = p.send_test_message().await {
            println!("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e);
            warn!("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e);
            warn!("   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ Kafka –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤");
        } else {
            println!("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–∞–º–∏
        if let Err(e) = p.send_test_messages_with_numbers(5).await {
            println!("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–∞–º–∏: {}", e);
            warn!("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–∞–º–∏: {}", e);
        } else {
            println!("–°–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–º–µ—Ä–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
        }
    }

    // –°–æ–∑–¥–∞–µ–º consumer –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    info!("üì• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è consumer'–∞...");
    println!("–°–æ–∑–¥–∞–µ–º consumer...");
    let consumer = match KafkaConsumer::new() {
        Ok(c) => {
            println!("Consumer —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            c
        },
        Err(e) => {
            println!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è consumer: {}", e);
            error!("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è consumer'–∞: {}", e);
            return Err(e);
        }
    };

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ topic
    println!("–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ topic...");
    if let Err(e) = consumer.subscribe() {
        println!("–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {}", e);
        error!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ topic: {}", e);
        return Err(e);
    }
    println!("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ topic —É—Å–ø–µ—à–Ω–∞");

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    info!("üéß –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è...");
    info!("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏");
    info!("==================================");
    println!("–ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...");

    consumer.start_consuming().await?;

    Ok(())
}
