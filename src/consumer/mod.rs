use crate::config;
use rdkafka::consumer::{Consumer, StreamConsumer};
use rdkafka::Message;
use std::time::Duration;
use tokio::time::sleep;
use anyhow::Result;
use log::{info, error, warn};

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
#[derive(Debug)]
pub struct MessageInfo {
    pub topic: String,
    pub partition: i32,
    pub offset: i64,
    pub key: Option<String>,
    pub payload: String,
    pub timestamp: i64,
}

/// –û—Å–Ω–æ–≤–Ω–æ–π consumer –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka
pub struct KafkaConsumer {
    consumer: StreamConsumer,
    topic: String,
}

impl KafkaConsumer {
    /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ consumer'–∞
    pub fn new() -> Result<Self> {
        let consumer: StreamConsumer = config::create_consumer_config().create()?;
        let topic = config::get_topic_name();

        Ok(Self { consumer, topic })
    }

    /// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ topic
    pub fn subscribe(&self) -> Result<()> {
        self.consumer.subscribe(&[&self.topic])?;
        info!("–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ topic: {}", self.topic);
        Ok(())
    }

    /// –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    pub async fn start_consuming(&self) -> Result<()> {
        info!("–ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ topic: {}", self.topic);
        info!("–û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...");

        let mut retry_count = 0;
        const MAX_RETRIES: u32 = 5;

        loop {
            match self.consumer.recv().await {
                Ok(msg) => {
                    retry_count = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏
                    let message_info = self.process_message(&msg)?;
                    self.display_message(&message_info);
                }
                Err(e) => {
                    retry_count += 1;
                    error!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {}/{}): {}", retry_count, MAX_RETRIES, e);

                    if retry_count >= MAX_RETRIES {
                        error!("üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.");
                        return Err(anyhow::anyhow!("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"));
                    }

                    let delay = Duration::from_secs(2 * retry_count as u64);
                    warn!("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...", delay.as_secs());
                    sleep(delay).await;
                }
            }
        }
    }

    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    fn process_message(&self, msg: &rdkafka::message::BorrowedMessage<'_>) -> Result<MessageInfo> {
        let payload = match msg.payload_view::<str>() {
            Some(Ok(s)) => s.to_string(),
            Some(Err(e)) => {
                return Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è payload: {}", e));
            }
            None => {
                return Err(anyhow::anyhow!("–ü—É—Å—Ç–æ–π payload"));
            }
        };

        let key = msg.key_view::<str>()
            .unwrap_or(Ok(""))
            .unwrap_or("")
            .to_string();

        let key = if key.is_empty() { None } else { Some(key) };

        Ok(MessageInfo {
            topic: msg.topic().to_string(),
            partition: msg.partition(),
            offset: msg.offset(),
            key,
            payload,
            timestamp: msg.timestamp().to_millis().unwrap_or(0),
        })
    }

    /// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
    fn display_message(&self, msg_info: &MessageInfo) {
        info!("üì® –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:");
        info!("   Topic: {}", msg_info.topic);
        info!("   Partition: {}", msg_info.partition);
        info!("   Offset: {}", msg_info.offset);
        info!("   Key: {:?}", msg_info.key);
        info!("   Payload: {}", msg_info.payload);
        info!("   Timestamp: {}", msg_info.timestamp);
        info!("   ---");
    }
}
